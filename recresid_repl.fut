import "recresid"

let X' = [[1.000000f64, 1.000000f64, 1.000000f64, 1.000000f64, 1.000000f64, 1.000000f64, 1.000000f64, 1.000000f64, 1.000000f64, 1.000000f64, 1.000000f64, 1.000000f64, 1.000000f64, 1.000000f64, 1.000000f64, 1.000000f64, 1.000000f64, 1.000000f64, 1.000000f64, 1.000000f64], [1.000000f64, 2.000000f64, 3.000000f64, 4.000000f64, 5.000000f64, 6.000000f64, 7.000000f64, 8.000000f64, 9.000000f64, 10.000000f64, 11.000000f64, 12.000000f64, 13.000000f64, 14.000000f64, 15.000000f64, 16.000000f64, 17.000000f64, 18.000000f64, 19.000000f64, 20.000000f64], [0.500000f64, 0.866025f64, 1.000000f64, 0.866025f64, 0.500000f64, 0.000000f64, -0.500000f64, -0.866025f64, -1.000000f64, -0.866025f64, -0.500000f64, -0.000000f64, 0.500000f64, 0.866025f64, 1.000000f64, 0.866025f64, 0.500000f64, 0.000000f64, -0.500000f64, -0.866025f64], [0.866025f64, 0.500000f64, 0.000000f64, -0.500000f64, -0.866025f64, -1.000000f64, -0.866025f64, -0.500000f64, -0.000000f64, 0.500000f64, 0.866025f64, 1.000000f64, 0.866025f64, 0.500000f64, 0.000000f64, -0.500000f64, -0.866025f64, -1.000000f64, -0.866025f64, -0.500000f64], [0.866025f64, 0.866025f64, 0.000000f64, -0.866025f64, -0.866025f64, -0.000000f64, 0.866025f64, 0.866025f64, 0.000000f64, -0.866025f64, -0.866025f64, -0.000000f64, 0.866025f64, 0.866025f64, 0.000000f64, -0.866025f64, -0.866025f64, -0.000000f64, 0.866025f64, 0.866025f64], [0.500000f64, -0.500000f64, -1.000000f64, -0.500000f64, 0.500000f64, 1.000000f64, 0.500000f64, -0.500000f64, -1.000000f64, -0.500000f64, 0.500000f64, 1.000000f64, 0.500000f64, -0.500000f64, -1.000000f64, -0.500000f64, 0.500000f64, 1.000000f64, 0.500000f64, -0.500000f64], [1.000000f64, 0.000000f64, -1.000000f64, -0.000000f64, 1.000000f64, 0.000000f64, -1.000000f64, -0.000000f64, 1.000000f64, 0.000000f64, -1.000000f64, -0.000000f64, 1.000000f64, 0.000000f64, -1.000000f64, -0.000000f64, 1.000000f64, 0.000000f64, -1.000000f64, -0.000000f64], [0.000000f64, -1.000000f64, -0.000000f64, 1.000000f64, 0.000000f64, -1.000000f64, -0.000000f64, 1.000000f64, 0.000000f64, -1.000000f64, 0.000000f64, 1.000000f64, 0.000000f64, -1.000000f64, 0.000000f64, 1.000000f64, 0.000000f64, -1.000000f64, -0.000000f64, 1.000000f64]]
let ys = [[4523.875861f64, f64.nan, 4011.662068f64, 6939.676970f64, 5146.940712f64, 7975.103436f64, 6217.871075f64, 6854.595361f64, 6172.594314f64, 5300.062474f64, 7315.675860f64, 6989.361224f64, f64.nan, 4319.484241f64, 823.677255f64, 4724.745944f64, 3211.334831f64, f64.nan, 4343.563695f64, 3163.030112f64], [6142.967300f64, 7174.472021f64, 6938.832836f64, f64.nan, 4399.747538f64, 4213.380201f64, 4075.672258f64, 4775.551034f64, 4623.968859f64, 7600.757643f64, 4172.123361f64, 4566.777123f64, f64.nan, 6898.511013f64, 6025.019390f64, f64.nan, 5710.909328f64, 4130.184217f64, 3122.243613f64, 3821.353439f64]]

let X = transpose X'
let test = mrecresid 1i64 X ys

let res = map filter_nan_pad ys
let ns = map (.0) res
let ys_nn = map (.1) res
let indss_nn = map (.2) res
let Xs_nn =
  map (\inds_nn ->
         map (\i -> if i != -1 then copy X[i, :] else replicate 8 f64.nan) inds_nn
      ) indss_nn |> trace
let n = ns[0]
let y_nn = ys_nn[0,:n]
let X_nn = Xs_nn[0,:n]
let test2 = recresid 1i64 Xs_nn[0,:ns[0]] ys_nn[0,:ns[0]]
let test3 = recresid 1i64 Xs_nn[1,:ns[1]] ys_nn[1,:ns[1]]

